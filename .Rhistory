knitr::opts_chunk$set(echo       = params$solutions,
eval       = params$solutions,
fig.align  = "center",
fig.height = 3,
fig.width  = 5)
cage%>%
ggplot() +
geom_point(mapping = aes(x = Date, y =(Days))) +
geom_smooth(method = lm, se = FALSE, mapping = aes(x = Date, y =(Days)))+
ggtitle("Length of Notes as Time & Piece Progresses")+
ylab("Length in Days")
library(tidyverse)
cage <- read_csv("../data/halberstadt.csv")
cage
knitr::opts_chunk$set(echo = TRUE)
cm <- read.table("ch2dataset.txt", header=F)
cm <- read.table("ch2dataset.txt", header=F)
cm <- read.table("ch2dataset.txt", header=F)
colnames(cm) <- c("time", "copiers")
head(cm, 3)
tail(cm, 2)
cm.SLR<-lm(time~copiers, data=cm)
cm.SLR
summary(cm.SLR)
critVal <-qt(.95,43) #finds critical value based on 90% confidence int
critVal
confint(cm.SLR, level=0.90)
knitr::opts_chunk$set(echo = TRUE,
fig.align  = "center",
fig.height = 4,
fig.width  = 5)
summary(bac.SLR)
summary(SLR.bac)
summary(bac.SLR)
bac.SLR<-lm(BAC~AW, data=bac)
bac <- read.table("bloodalc.txt", header=T)
bac
summary(bac)
colnames(bac)
dim(bac)
bac.SLR<-lm(BAC~AW, data=bac)
bac.SLR
plot(BAC~AW, data=bac, pch=20)
abline(bac.SLR$coef)
summary(bac.SLR)
cm.SLR<-lm(time~copiers, data=cm) #estimated linear regression
cm.SLR
summary(cm.SLR)
(0.826-0.7)/0.113
(15.0352 - 0)/(0.4831)
data.frame("t_statistic" = tobs, "p_value"= 1-pt(tobs, df=20))
tobs <- (0.826-0.7)/0.113
summary(SLR.bac)
tobs <- (0.826-0.7)/0.113
data.frame("t_statistic" = tobs, "p_value"= 1-pt(tobs, df=20))
summary(SLR.bac)
summary(bac.SLR)
tobs <- (15.0352 - 0)/(0.4831)
tobs
(0.826-0.7)/0.113
cm <- read.table("ch2dataset.txt", header=F)
cm
pt(31.12233,43)
summary(bac.SLR)
summary(cm.SLR)
(15.0352 - 0)/(0.4831)
pt(31.12233,43)
2  * pt(31.12233,43)
1-(pt(1.115,20))
summary(cm.SLR)
summary(bac.SLR)
1-(pt(1.115,20))
2 * pt(31.12233,43)
(0.826-0.7)/0.113
summary(bac.SLR)
(0.826-0.7)/0.113
data.frame("t_statistic" = tobs, "p_value"= 1-pt(tobs, df=20))
tobs <- (0.826-0.7)/0.113
summary(bac.SLR)
data.frame("t_statistic" = tobs, "p_value"= 1-pt(tobs, df=20))
tobs <- (15.0352 - 0)/(0.4831)
summary(cm.SLR)
summary(bac.SLR)
(0.826-0.7)/0.113
tcrit <- qt(0.975, df=22-2)  # Recall n = 22
c(0.826 - tcrit*0.113, 0.826 + tcrit*0.113)
summary(cm.SLR)
tobs <- (15.0352 - 0)/(0.4831)
tobs
summary(bac.SLR)
2*pt(31.12233,43)
(0.826-0.7)/0.113
dim(bac)
bac <- read.table("bloodalc.txt", header=T)
bac
data.frame("t_statistic" = tobs, "p_value"= 2*(pt(tobs, df=20)))
data.frame("t_statistic" = tobs, "p_value"= 2*(pt(tobs, df=20)))
data.frame("t_statistic" = tobs, "p_value"= 2*(pt(tobs, df=243))
2*(pt(tobs, df=243))
p_value= 2*(pt(tobs, df=43)
p_value
p_value= 2*(pt(tobs, df=43))
p_value
p_value= 2*pt(q = tobs, df=43,lower.tail=FALSE )
p_value
?pt()
summary(cm.SLR)
p_value
p_value=2*pt(q=1.24, df=22, lower.tail=FALSE)
p_value= 2*pt(q = tobs, df=43,lower.tail=FALSE )
p_value
p_value=2*pt(q=1.24, df=22, lower.tail=FALSE)
p_value
pt(q = tobs, df=43,lower.tail=FALSE
pt(q = tobs, df=43,lower.tail=FALSE )
p_value= 2(pt(q = tobs, df=43,lower.tail=FALSE ))
p_value= 2(pt(q = tobs, df=43,lower.tail=FALSE))
p_value= 2*(pt(q = tobs, df=43,lower.tail=FALSE))
p_value
p_value= (pt(q = tobs, df=43,lower.tail=FALSE ))
p_value
summary(cm.SLR)
summary(cm.SLR)
summary(bac.SLR)
summary(cm.SLR) #
2e-16 * 2
confint(cm.SLR, level=0.90)
summary(cm.SLR)
tobs <- (15.0352 - 14)/(0.4831)
tobs
p_value= 1 - (pt(q = tobs, df=43))
p_value
summary(cm.SLR)
(15.0352 - 14)/(0.4831)
p_value= 1 - (pt(q = tobs, df=43))
p_value
p_value > .05
0.0189143 < .05
plot(BAC~AW, data=bac, ylim=c(-0.05, 0.17), pch=20)
abline(bac.SLR$coef)
newx<-seq(0, 0.2, by=0.005) #sets up a grid of x values by creating x val sequence by increment 0.05
bac.CI<-predict(bac.SLR, newdata=data.frame(AW=newx), interval="confidence", leve=0.95) #create CI
bac.PI<-predict(bac.SLR, newdata=data.frame(AW=newx), interval="prediction", leve=0.95) #create PI
lines(newx, bac.CI[,2], lty=2, col=2) #plot x against second column saved from predictor function, lower
lines(newx, bac.CI[,3], lty=2, col=2) #plot x against second column saved from predictor function, upper
lines(newx, bac.PI[,2], lty=3, col=3, lwd=3)
lines(newx, bac.PI[,3], lty=3, col=3, lwd=3)
cm
cm <- read.table("ch2dataset.txt", header=F)
colnames(cm) <- c("time", "copiers")
head(cm, 3)
tail(cm, 2)
cm <- read.table("ch2dataset.txt", header=F)
colnames(cm) <- c("time", "copiers") ->cm
cm <- read.table("ch2dataset.txt", header=F)
colnames(cm) <- c("time", "copiers")
head(cm, 3)
tail(cm, 2)
cm
plot(BAC~AW, data=bac, ylim=c(-0.05, 0.17), pch=20)
abline(bac.SLR$coef)
newx<-seq(0, 0.2, by=0.005) #sets up a grid of x values by creating x val sequence by increment 0.05
bac.CI<-predict(bac.SLR, newdata=data.frame(AW=newx), interval="confidence", leve=0.95) #create CI
bac.PI<-predict(bac.SLR, newdata=data.frame(AW=newx), interval="prediction", leve=0.95) #create PI
lines(newx, bac.CI[,2], lty=2, col=2) #plot x against second column saved from predictor function, lower
lines(newx, bac.CI[,3], lty=2, col=2) #plot x against second column saved from predictor function, upper
lines(newx, bac.PI[,2], lty=3, col=3, lwd=3)
lines(newx, bac.PI[,3], lty=3, col=3, lwd=3)
plot(time~copiers, data=cm, ylim=c(-0.05, 0.17), pch=20)
abline(cm.SLR$coef)
cm%>%
arrange(desc(time))
library(tidyverse)
cm%>%
arrange(desc(time))
arrange(desc(time))
cm%>%
arrange(desc(time))
plot(time~copiers, data=cm, ylim=c(0, 150), pch=20)
plot(time~copiers, data=cm, ylim=c(0, 170), pch=20)
plot(time~copiers, data=cm, ylim=c(0, 170), pch=20)
abline(cm.SLR$coef)
cm%>%
arrange(desc(copiers))
plot(time~copiers, data=cm, ylim=c(0, 170), pch=20)
abline(cm.SLR$coef)
newx<-seq(0, 0.2, by=0.005)
plot(time~copiers, data=cm, ylim=c(0, 170), pch=20)
abline(cm.SLR$coef)
newx<-seq(0, 0.2, by=0.005)
cm.CI<-predict(bac.SLR, newdata=data.frame(copiers=newx), interval="confidence", leve=0.95) #create CI
plot(time~copiers, data=cm, ylim=c(0, 170), pch=20)
abline(cm.SLR$coef)
newx<-seq(0, 0.2, by=0.005)
cm.CI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="confidence", leve=0.95) #create CI
cm.PI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="prediction", leve=0.95) #create PI
cm.PI
plot(time~copiers, data=cm, ylim=c(0, 170), pch=20)
abline(cm.SLR$coef)
newx<-seq(0, 0.2, by=0.005)
cm.CI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="confidence", leve=0.95) #create CI
cm.PI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="prediction", leve=0.95) #create PI
lines(newx, cm.CI[,2], lty=2, col=2) #plot x against second column saved from predictor function, lower
lines(newx, cm.CI[,3], lty=2, col=2) #plot x against second column saved from predictor function, upper
lines(newx, cm.PI[,2], lty=3, col=3, lwd=3)
lines(newx, cm.PI[,3], lty=3, col=3, lwd=3)
plot(time~copiers, data=cm, ylim=c(0, 170), pch=20)
abline(cm.SLR$coef)
newx<-seq(0, 0.2, by=0.005)
cm.CI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="confidence", leve=0.95) #create CI
cm.PI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="prediction", leve=0.95) #create PI
lines(newx, cm.CI[,2], lty=2, col=2) #plot x against second column saved from predictor function, lower
lines(newx, cm.CI[,3], lty=2, col=2) #plot x against second column saved from predictor function, upper
lines(newx, cm.PI[,2], lty=3, col=3, lwd=3)
lines(newx, cm.PI[,3], lty=3, col=3, lwd=3)
plot(time~copiers, data=cm, ylim=c(0, 170), pch=20)
abline(cm.SLR$coef)
newx<-seq(0, 0.2, by=0.005)
cm.CI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="confidence", leve=0.95) #create CI
cm.PI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="prediction", leve=0.95)
lines(newx, cm.CI[,2], lty=2, col=2)
plot(time~copiers, data=cm, ylim=c(0, 170), pch=20)
abline(cm.SLR$coef)
newx<-seq(0, 0.2, by=0.005)
cm.CI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="confidence", leve=0.95) #create CI
cm.PI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="prediction", leve=0.95) #create PI
lines(newx, cm.CI[,2], lty=2, col=2)
plot(time~copiers, data=cm, ylim=c(0, 170), pch=20)
abline(cm.SLR$coef)
newx<-seq(0, 0.2, by=0.005)
cm.CI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="confidence", leve=0.95) #create CI
cm.PI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="prediction", leve=0.95) #create PI
lines(newx, cm.CI[,2], lty=2, col=2) #plot x against second column saved from predictor function, lower
lines(newx, cm.CI[,3], lty=2, col=2) #plot x against second column saved from predictor function, upper
lines(newx, cm.PI[,2], lty=3, col=3, lwd=3)
lines(newx, cm.PI[,3], lty=3, col=3, lwd=3)
plot(time~copiers, data=cm, ylim=c(0, 170), pch=20)
abline(cm.SLR$coef)
newx<-seq(0, 0.2, by=0.005)
cm.CI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="confidence", leve=0.95) #create CI
cm.PI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="prediction", leve=0.95) #create PI
lines(newx)
cm.CI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="confidence", leve=0.95) #create CI
cm.PI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="prediction", leve=0.95)
cm.CI
plot(time~copiers, data=cm, ylim=c(0, 170), pch=20)
abline(cm.SLR$coef)
newx<-seq(0, 0.2, by=0.005)
cm.CI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="confidence", leve=0.95) #create CI
cm.PI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="prediction", leve=0.95) #create PI
lines(newx, cm.CI[,2], lty=2, col=2) #plot x against second column saved from predictor function, lower
lines(newx, cm.CI[,3], lty=2, col=2) #plot x against second column saved from predictor function, upper
lines(newx, cm.PI[,2], lty=3, col=3, lwd=3)
lines(newx, cm.PI[,3], lty=3, col=3, lwd=3)
cm.CI
plot(time~copiers, data=cm, ylim=c(0, 170), pch=20)
abline(cm.SLR$coef)
newx<-seq(0, 0.2, by=0.005)
cm.CI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="confidence", leve=0.95) #create CI
cm.PI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="prediction", leve=0.95) #create PI
lines(newx, cm.CI[,2], lty=2, col=2) #plot x against second column saved from predictor function, lower
lines(newx, cm.CI[,3], lty=2, col=2)
plot(time~copiers, data=cm, ylim=c(0, 170), pch=20)
abline(cm.SLR$coef)
newx<-seq(0, 0.2, by=0.005)
cm.CI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="confidence", leve=0.95) #create CI
cm.PI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="prediction", leve=0.95) #create PI
lines(newx, cm.CI[,2])
plot(time~copiers, data=cm, ylim=c(0, 170), pch=20)
abline(cm.SLR$coef)
newx<-seq(0, 0.2, by=0.005)
cm.CI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="confidence", leve=0.95) #create CI
cm.PI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="prediction", leve=0.95) #create PI
lines(newx, cm.CI[2])
newx
plot(time~copiers, data=cm, ylim=c(0, 170), pch=20)
abline(cm.SLR$coef)
newx<-seq(0, 12, by=1)
cm.CI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="confidence", leve=0.95) #create CI
cm.PI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="prediction", leve=0.95) #create PI
lines(newx, cm.CI[,2], lty=2, col=2) #plot x against second column saved from predictor function, lower
lines(newx, cm.CI[,3], lty=2, col=2) #plot x against second column saved from predictor function, upper
lines(newx, cm.PI[,2], lty=3, col=3, lwd=3)
lines(newx, cm.PI[,3], lty=3, col=3, lwd=3)
plot(time~copiers, data=cm, ylim=c(0, 170), pch=20)
abline(cm.SLR$coef)
newx<-seq(0, 12, by=.5)
cm.CI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="confidence", leve=0.95) #create CI
cm.PI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="prediction", leve=0.95) #create PI
lines(newx, cm.CI[,2], lty=2, col=2) #plot x against second column saved from predictor function, lower
lines(newx, cm.CI[,3], lty=2, col=2) #plot x against second column saved from predictor function, upper
lines(newx, cm.PI[,2], lty=3, col=3, lwd=3)
lines(newx, cm.PI[,3], lty=3, col=3, lwd=3)
plot(time~copiers, data=cm, ylim=c(0, 170), pch=20)
abline(cm.SLR$coef)
newx<-seq(0, 12, by=2)
cm.CI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="confidence", leve=0.95) #create CI
cm.PI<-predict(cm.SLR, newdata=data.frame(copiers=newx), interval="prediction", leve=0.95) #create PI
lines(newx, cm.CI[,2], lty=2, col=2) #plot x against second column saved from predictor function, lower
lines(newx, cm.CI[,3], lty=2, col=2) #plot x against second column saved from predictor function, upper
lines(newx, cm.PI[,2], lty=3, col=3, lwd=3)
lines(newx, cm.PI[,3], lty=3, col=3, lwd=3)
cm <- read.table("ch2dataset.txt", header=F)
colnames(cm) <- c("time", "copiers")
head(cm, 3)
tail(cm, 2)
anova(cm.SLR)
anova(bac.SLR)
predict(cm.SLR, se.fit = T, interval = "confidence")
predict(cm.SLR, newdata=data.frame(copiers = 6), se.fit = T,
interval = "confidence", leve=0.90)
predict(bac.SLR, newdata=data.frame(copiers = 6), se.fit = F,
interval = "prediction", leve=0.90)
predict(cm.SLR, newdata=data.frame(copiers = 6), se.fit = T,
interval = "confidence", leve=0.90)
predict(cm.SLR, newdata=data.frame(copiers = 6), se.fit = F,
interval = "prediction", leve=0.90)
c(1, 2,3) c[(FALSE, TRUE, TRUE)]
c(1, 2,3) c[(FALSE, TRUE, TRUE)]
c(1, 2,3) [c(FALSE, TRUE, TRUE)]
c(1, 2,3) == NA
x <- list(a = 1, b = c(2,3))
x[0]
x <- list(a = 1, b = c(2,3))
x[0]
x[0]
x <-c(1,5,9)
x[x==5]
x<- list (a =1, b =2, c= 3)
x[c("a", "c")]
x[c("a", "c")]
x<- c(1, 1, NA, 1)
sum(x, na.rm = TRUE)
?class()
seq(1, 100)
1:100
x<-c(4,5,6)
x[c(2,2)]
x<- c(1, 1, NA, 1)
sum(x, na.rm = TRUE)
length(c(1,2,3,NA))
c(1, 1, NA, 1) & c(TRUE, TRUE, TRUE)
c(FALSE, TRUE, NA) & c(TRUE, TRUE, TRUE)
?concat()
?concat()
?combine()
x<- data.frame(x=c(1,2,3))
x$x
knitr::opts_chunk$set(echo = TRUE)
#read Copier Maintenance data in
cm <- read.table("ch2dataset.txt", header=F)
colnames(cm) <- c("time", "copiers")
head(cm, 3)
tail(cm, 2)
cm.SLR<-lm(time~copiers, data=cm) #estimated linear regression
cm.SLR
summary(cm.SLR) # In order to find the estimated parameter & standard error
critVal <-qt(.95,43) #finds critical value based on 90% confidence int
critVal
confint(cm.SLR, level=0.90) # confirms my math using R software
summary(cm.SLR) #in order to find estimated parameter & standard error of slope
tobs <- (15.0352 - 0)/(0.4831) # confirmed by summary above
p_value= 2*(pt(q = tobs, df=43,lower.tail=FALSE)) # finding p value for 2 tailed test
# p-value = 4.013936e-31
summary(cm.SLR) # software output to confirm our results
2e-16  + 2e-16
2e-16 *2e-16
p_value= 2*(pt(q = tobs, df=43,lower.tail=FALSE))
p_value
tobs
p_value= 2*(pt(q = tobs, df=43))
p_value= 2*(1-pt(abs(tobs), df=43))
p_value
tobs
